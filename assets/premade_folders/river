#!/bin/lua
-- [ Made by the Duat. https://entertheduat.org ] --

local argCount = #arg

--[=[ Backend setup ]=]--
local NileRiver = dofile("/var/NileRiver/core/NileRiver.lua")


-- [ Input/Output setup. ] --
local frontend_IO = {}

frontend_IO.inp = function() -- Get user input.
	io.write("\x1b[38;2;137;180;250m> \x1b[38;2;180;190;254m")
	local text = io.read()
	io.write("\x1b[38;2;255;255;255m")
	return text
end
frontend_IO.outp = function(text) -- Write raw output.
	io.write(text)
end
frontend_IO.foutp = function(text) -- Print stylized output.
	print("\x1b[38;2;137;180;250m| \x1b[38;2;180;190;254m" .. text .. "\x1b[38;2;255;255;255m")
end
frontend_IO.afoutp = function(text) -- Print secondary stylized output.
	print("    \x1b[38;2;245;194;231m> \x1b[38;2;203;166;247m" .. text .. "\x1b[38;2;255;255;255m")
end
frontend_IO.err = function(text) -- Print error output.
	print("\x1b[38;2;243;139;168m!![Error]> \x1b[38;2;203;160;247m" .. text .. "\x1b[38;2;255;255;255m")
end

NileRiver.initializeIO(frontend_IO)


--[=[ System function handler ]=]--
local function sendInfo()
	NileRiver.System.info(arg[2])
end

local function sendConfig()
	NileRiver.System.config(arg[2], arg[3])
end

local function sendTheme()
	if arg[2] then
		NileRiver.System.theme(arg[2])
	end
end

local function sendService()
	NileRiver.System.service(arg[2], arg[3])
end

local function sendGraphics()
	local value
	if arg[2] == "xd" or arg[2] == "xi" then
		value = {}
		local i = 3
		while i <= argCount do
			table.insert(value, arg[i])
			i = i + 1
		end
	else
		value = arg[3]
	end
	NileRiver.System.graphics(arg[2], value)
end

local function sendNetwork()
	if arg[3] then
		NileRiver.System.network(arg[2], arg[3])
	else
		NileRiver.System.network(arg[2], nil)
	end
end

local function sendSoftware()
	local hasRequestedToUseAUR = false
	local packageList = {}
	while argCount > 1 do
		if arg[argCount] ~= "-aur" then
			table.insert(packageList, arg[argCount])
		else
			hasRequestedToUseAUR = true
		end
		argCount = argCount - 1
	end
	NileRiver.System.software(arg[1], packageList, hasRequestedToUseAUR)
end

local function sendUpdate()
	local dev = false
	if arg[2] == "dev" then
		dev = true
	end
	NileRiver.System.update("system", dev)
	NileRiver.System.update("packages", dev)
end



--[=[ Command processor ]=]--
local firstArgSheet = {
	["info"]    = sendInfo,
	["config"]  = sendConfig,
	["theme"]  = sendTheme,
	["sv"]      = sendService,
	["gfx"]     = sendGraphics,
	["net"]     = sendNetwork,
	["fetch"]   = sendSoftware,
	["remove"]  = sendSoftware,
	["update"]  = sendUpdate,
	["start"]   = NileRiver.System.start -- Takes no arguments.
}

if firstArgSheet[arg[1]] then
	firstArgSheet[arg[1]]()
else
	frontend_IO.err(arg[1] .. " is not a valid river command.")
end
